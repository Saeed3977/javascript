/*
	Observe：观察者模式
	它是这样一种设计模式，一个被称作被观察者的对象，维护一组被称为观察者的对象，这些对象依赖于被观察者
	被观察者自动将自身的状态的任何变化通知给他们。当被观察者需要将一些变化通知给观察者的时候，它将采用广播的
	方式，这条广播可能包含特定于这条通知的一些数据。当特定的观察者不需要接收它所注册的被观察者的通知的时候，
	被观察者可以将其从所维护的组中删除
*/

	//section1: 分解上述定义得到需要实现的组件如下
	1.被观察者：维护一组观察者，提供用于增加和删除观察者的方法
	2.观察者：提供一个更新接口，用于被观察者状态发生变化时，得到通知
	3.具体的被观察者：状态变化时广播通知给观察者，保持具体的观察者的信息
	4.具体的观察者：保持一个指向具体被观察者的引用
	
	//section2:
	function ObserveList(){
		this.observeList = [];
	}
	ObserveList.prototype.add = function(obj){
		this.observeList.push(obj);
	};
	ObserveList.prototype.empty = function(){
		this.observeList = [];
	};
	ObserveList.prototype.removeAt = function(index){
		this.observeList.splice(index,1);
	};
	ObserveList.prototype.notify = function(context){
		var len = this.observeList.length;
		for(var i=0; i<len; i++){
			this.observeList[i].update(context);
		}
	};
	
	function Observer(observeListInstance){
		this.observeListInstance = observeListInstance;
	}
	Observer.prototype.update = function(context){
		//...
	};
	