
关于同源策略：

	浏览器都有一个同源策略（处于安全策略），其限制之一就是我们不能通过ajax请求不同源的文档及数据，限制二就是浏览器中不同域的
	框架之间是不能进行js的交互的（互相访问）。在此之前自己对同源策略的理解有些片面，没有意识到不同域的框架（iframe）之间是不能
	进行js交互的，但如果反向推理其实就很好理解为什么不可以了。
	
什么是跨域：
	
	只要协议，域名（包括子域），端口有任何一个不同，都应该被当做是不同的域。

解决方案：

	1.CORS(crosss origin resource share):跨源资源共享
		它其实是一种浏览器端和服务端协商的一种机制，服务器端通过设置响应头Access-Control-Allow-Origin : <origin> | *来声明哪些来源
		请求可以访问服务器端资源，在浏览器发起跨域请求时浏览器（现代浏览器中可以发起跨域请求。浏览器必须能支持跨源共享带来的新的组
		件，包括请求头和策略执行等）会自动在请求头中添加origin: <origin>以表明请求来自哪里看，只要符合服务器端设置的Acces-Control-
		Allow-Origin的值即可。当然这只是两端协商的一部分，跨域带来的最大问题就是安全性问题，cookie（凭证信息）有些情况下是不能让
		其他域的服务器获取的，但如果将xhr的withCredentials属性设置为true,它也会被随请求发送出去，但如果服务器响应中没有Access-Control
		-Allow-Credentials : true的响应头，那么浏览器将不会把响应的数据结果传递给发出请求的脚本程序。从上面我们可以得出一个小规律，
		那就是在浏览器和服务端的协商过程中，请求头和响应头唯一的不同之处就是响应头多了Access-Control-Allow，这将便于我们理解和记忆。
		还例如在服务端设置可以使用哪些自定义http请求头时要使用Access-Control-Allow-Headers: x-pingpong,这样在请求时就可以设置x-pingpong
		这样的请求头了。
	