代理模式：
代理，顾名思义就是帮别人做事，GOF对代理模式的定义如下：它是为其他对象提供一种代理以控制对这个对象的访问。
其本质是控制对象访问，代理是一个对象，它可以用来控制对另一个对象的访问。它与另外那个对象实现了同样的接口，
并且会把任何方法调用传递给那个对象。另外那个对象通常称为本体，代理可以代替其本体被实例化，并使其可以被远程
访问。它还可以把本体的实例化推迟到真正需要的时候，对于实例化比较费时的本体，或者因为本身占用内存空间较大，】
这种模式特别有用。在处理那些需要较长时间才能把数据载入用户界面的类，代理也大有好处。
代理模式最基本的形式是对访问进行控制，代理对象和本体实现的是同样的接口，实际工作还是本体在做。它才是负责执行
所分派任务的那个对象或类，代理对象所做的不外乎节制对本体的访问。要注意的是代理对象并不会在本体的基础上添加方法
或修改其方法（就像装饰者模式那样），也不会简化那个对象的接口（就像门面模式那样）。它实现的接口与本体完全相同，
所有对它进行的方法调用都会被传递给本体。

(function(){
	//目标对象，是真正被代理的对象
	function Subject(){}
	Subject.prototype.request = function(){};
	
	//代理对象
	function Proxy(realSubject){
		this.realSubject = realSubject;
	}
	Proxy.prototype.request = function(){
		this.realSubject.request();
	};
})();

//section1: 
如何控制对本体的访问
那种根本不实现任何访问控制的代理最简单。它所做的只是把所有方法调用传递到本体。这种代理毫无存在必要，但它也提供了
一个进一步发展的基础。在下面的例子中，我们将创建一个代表图书馆的类。该类封装了一个Book对象
var Publication = new Interface('Publication',['getIsbn','setIsbn','getTitle','setTitle','getAuthor','display']);
var Book = function(isbn,title,author){
	//implements publication
};
var Library = new Interface('Library',['findBooks','checkoutBook','returnBook']);
var PublicLibrary = function(books){
	//implement library
	this.catalog = {};
	for(var i=0,len=books.length; i<len; i++){
		this.catalog[books[i].getIsbn()] = {
			book: books[i],
			available: true
		};
	}
};
PublicLibrary.prototype = {
	findBooks: function(searchString){
		var results = [];
		for(var isbn in this.catalog){
			if(!this.catalog.hasOwnProperty(isbn)){
				continue;
			}
			if(searchString.match(this.catalog[isbn].getTitle()) || searchString.match(this.catalog[isbn].getAuthor())){
				results.push(this.catalog[isbn]);
			}
		}
		return results;
	},
	checkoutBook: function(book){
		var isbn = book.getIsbn();
		if(this.catalog[isbn]){
			if(this.catalog[isbn].available){
				this.catalog[isbn].available = false;
				return this.catalog[isbn];
			}
			else{
				throw new Error('this book is not currently available');
			}
		}
		else{
			throw new Error('this book is not found');
		}
	},
	returnBook: function(book){
		var isbn = book.getIsbn();
		if(this.catalog[isbn]){
			this.catalog[isbn].available = true;
		}
		else{
			throw new Error('this book is not found');
		}
	}
};
/*
	这个类非常简单，它可以用来查书，借书和还书。下面是一个没有实现任何访问控制的PublicLibrary类的代理：
*/
var PublicLibraryProxy = function(catalog){
	this.library = new PublicLibrary(catalog);
};
PublicLibraryProxy.prototype = {
	findBooks: function(searchString){
		return this.library.findBooks(searchString);
	},
	checkoutBook: function(book){
		return this.library.checkoutBook(book);
	},
	returnBook: function(book){
		return this.library.returnBook(book);
	}
};

//section2:
/*
	这种类型的代理没有什么好处，在各种类型的代理中，虚拟代理是最有用的类型之一。虚拟代理用于控制对那种创建开销很大的本体
	的访问。它会把本体的实例化推迟到有方法被调用的时候，有时还会提供关于实例化状态的反馈。作为一个例子，假设PublicLibrary
	的实例化很慢，不能在网页加载的时候立即完成。我们可以为其创建一个虚拟代理，让它把PublicLibrary的实例化推迟到必要的时候。
*/
var PublicLibraryVirtualProxy = function(catalog){
	this.library = null;
	this.catalog = catalog;
};
PublicLibraryVirtualProxy.prototype = {
	_initializeLibrary: function(){
		if(this.library == null){
			this.library = new PublicLibrary(this.catalog);
		}
	},
	findBooks: function(searchString){
		this._initializeLibrary();
		return this.library.findBooks(searchString);
	},
	checkoutBook: function(book){
		this._initializeLibrary();
		return this.library.checkoutBook(book);
	},
	returnBook: function(book){
		this._initializeLibrary();
		return this.library.returnBook(book);
	}
};
/*
	PublicLibraryProxy和PublicLibraryVirtualProxy之间的关键区别在于后者不会立即创建PublicLibrary的实例。PublicLibraryVirtualProxy
	会把构造函数的参数保存起来。直到有方法调用时才真正执行本例的实例化。这样一来，如果图书馆对象一直未用到，那么它就不会被创建出来。
	在本例中，方法调用就是触发因素
*/

//section3: 
代理模式在许多方面很像装饰者，装饰者和虚拟代理都要对其他对象进行包装，都要实现与被包装对象相同的接口，而且都要把方法调用传递给被包装
对象。最大区别在于装饰者会对被包装对象的功能进行修改和扩充，而代理只不过是控制对它的访问。除了有时可能会添加一些控制代码之外，代理并不
会对传递给本体的方法调用进行修改。而装饰者模式就是为修改方法而生的。另一个区别在于被包装对象的创建方式上。在装饰者模式中，被包装对象的
实例化过程是完全独立的，这个对象创建出来后可以随意为其裹上一个或者更多装饰者。而在代理模式中，被包装对象的实例化是代理的实例化过程的一
部分。

//section4:
虚拟代理是一个对象，用于控制对一个创建开销昂贵的资源的访问。虚拟代理是一种优化模式。如果有些类或对象需要使用大量内存其数据，而你并不
需要在实例化完成后立即访问这些数据，或者，其构造函数需要进行大量计算那就应该使用虚拟代理将设置开销的产生推迟到真正需要使用数据的时候。
代理还可以在设置的进行过程中提供类似于“正在加载...”这样的消息，这可以形成一个反应积极的用户界面，以免让用户面对一个没有任何反馈的空白
页面。远程代理则没有这样清楚的用例。如果需要访问某种远程资源的话，那么最好是用一个类或对象来包装它，而不是一遍又一遍地手工设置XMLHttpRequest
对象。问题在于应该用什么类型的对象来包装这个资源呢？如果包装对象实现了远程资源的所有方法，那它就是一个远程代理。如果它会在运行期间增添
一些方法，那它就是一个装饰者。如果它简化了该远程资源的接口，那它就是一个门面。远程代理是一种结构型模式，它提供了一个访问位于其他环境中
的资源的原生JS API.总而言之，如果有些类或者对象的创建开销比较大，而且不需要在实例化完成后立即访问器数据，那么应该使用虚拟代理。如果你有
某种远程资源，并且要为资源提供的所有功能实现对应的方法，那么应该使用远程代理。

var SimpleHandler = function(){
	//implements AjaxHandler
};
SimpleHandler.prototype = {
	createXhrObject: function(){
		var methods = [
			function(){
				return new XMLHttpRequest();
			},
			function(){
				return new ActiveXObject();
			},
			function(){
				return new ActiveXObject();
			}
		];
		for(var i=0,len=methods.length; i<len; i++){
			try{
				methods[i]();
			}
			catch(e){
				continue;
			}
		}
		this.createXhrObject = methods[i]();
		return methods[i]();
	},
	request: function(methold,url,callback,postVars){
		var xhr = this.createXhrObject();
		xhr.onreadystatechange = function(){
			if(xhr.readystate == 4){
				return;
			}
			((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) ? callback.success(xhr.responseText,xhr.responseXML) : callback.failure(xhr.status);
		};
		xhr.open(method,url,true);
		if(method !== 'POST'){
			postVars = null;
		}
		xhr.send(postVars);
	}
};
var xhrHandler = new SimpleHandler(),
	callback1 = {
		success: function(responseText){
			var stats = eval('(' + responseText + ')');
			displayPagesviews(stats);
		},
		failure: function(statusCode){
			throw new Error('async request for stats failed');
		}
	},
	callback2 = {
		success: function(responseText){
			var stats = eval('(' + responseText + ')');
			displayBrowserShare('async request for stats failed');
		}
	};
xhrHandler.request('GET','/stats/getPagesviews?page=index.html',callback1);
xhrHandler.request('GET','/stats/getBrowserShare?page=index.html',callback2);
	
	
//优化版本
var PageStats = new Interface('PageStats',['getPageviews','getUniques','getBrowserShare','getTopSearchTerms','getMostVisitedPages']);

//定义远程代理StatsProxy
var StatsProxy = (function(){
	var xhrHandler = new SimpleHandler(),
		urls = {
			pageViews: '/stats/getPageViews/',
			uniques: '/stats/getUniques/',
			browserShare: '/stats/getBrowserShare/',
			topSearchTerms: '/stats/getTopSearchTerms/',
			mostVisitedPages: '/stats/getMostVisitedPages/'
		};
	function xhrFailure(){
		throw new Error('statsProxy: async request for stats failed');
	}
	function fetchData(url,dataCallback,startDate,endDate,page){
		var callback = {
			success: function(responseText){
				var stats = eval('(' + responseText +')');
				dataCallback(stats);
			},
			failure: xhrFailure
		};
		var getVars = [];
		if(startDate !== undefined){
			getVars.push('startDate=' + encodeURIComponent(startDate));
		}
		if(endDate !== undefined){
			getVars.push('endDate=' + encodeURIComponent(endDate));
		}
		if(page !== undefined){
			getVars.push('page=' + page);
		}
		if(getVars.length > 0){
			url = url + '?' + getVars.join('&');
		}
		xhrHandler.request('GET',url,callback);
	}
	return {
		getPageViews: function(callback,startDate,endDate,page){
			fetchData(urls.pageViews,callback,startDate,endDate,page);
		},
		getUniques: function(callback,startDate,endDate,page){
			fetchData(urls.uniques,callback,startDate,endDate,page);
		},
		getBrowserShare: function(callback,startDate,endDate,page){
			fetchData(urls.browserShare,callback,startDate,endDate,page);
		},
		getMostVisitedPages: function(callback,startDate,endDate,page){
			fetchData(urls.mostVisitedPages,callback,startDate,endDate,page);
		}
	};
})();

/*
	现在实现代码与web服务的耦合变得更加松散，而重复性代码也大大减少了。对待StatusProxy对象与对待别的JS对象没什么两样，你可以随意用它进行查询。
	不过这的确暴露了这种方法的一个弊端。远程代理，根据其定义，应该能掩盖数据的实际来源，即使你可以将其视为本地资源，它实际上还是要对服务器进行
	访问，根据用户的链接速度，这种访问耗费的时间少则几毫秒，多则几秒。在设计远程代理时，注明一下这种性能问题很有必要。在本例中这个问题可以通过
	借助回调函数进行异步调用稍加缓解，这样程序的执行就不会因为要等待调用结果而被阻塞。但是回调函数的存在多少暴露了一些下层的实现细节，因为如果
	不与外部服务通信的话是不需要使用回调函数的
*/

//section5:包装web服务的通用模式
我们可以从上面的例子中提炼出一个更加通用的web服务包装模式。由于JS的同源性限制，web服务代理所包装的服务必须部署在使用代理的网页所在的域中。这里
使用一个构造函数的普通类，以便以后进行拓展。
var webserviceProxy = function(){
	this.xhrHandler = new SimpleHandler();
};
webserviceProxy.prototype = {
	_xhrFailure: function(){
		throw new Error('statsProxy: async request for stats failed');
	},
	_fetchData: function(url,dataCallback,getVars){
		var that = this;
		var callback = {
			success: function(responseText){
				var obj = eval('(' + responseText + ')');
				dataCallback(obj);
			}
		};
		var getVarArray = [];
		for(var name in getVars){
			getVarArray.push(name + '=' + getVars[name]);
		}
		if(getVarArray.length > 0){
			url = url + '?' + getVarArray.join('&');
		}
		this.xhrHandler.request('GET',url,callback);
	}
};
//使用这个通用模式时，只需要从webserviceProxy派生一个子类，然后借助_fetchData方法实现需要的方法即可：
var statsProxy = function(){
	statsProxy.superclass.constructor.call(this);
};
function extend(subClass,superClass){
	var F = function(){};
	F.prototype = superClass.prototype;
	subClass.prototype = new F();
	subClass.prototype.constructor = subClass;
	subClass.superClass = superClass.prototype;
	if(superClass.prototype.constructor == Object.prototype.constructor){
		superClass.prototype.constructor = superClass;
	}
}
extend(statsProxy,webserviceProxy);
statsProxy.prototype.getPageviews = function(callback,startDate,endDate,page){
	this._fetchData('test.json',callback,{
		'startDate' : startDate,
		'endDate' : endDate,
		'page' : page
	});
};
statsProxy.prototype.getUniques = function(callback,startDate,endDate,page){
	this._fetchDate('/stats/getUniques/',callback,{
		'startDate' : startDate,
		'endDate' : endDate,
		'page' : page
	});
};


//section6
这次的任务是为公司网站的主页添加一个可搜索的员工目录，它应该模仿时间的员工花名册的页面，从A开始，显示其姓氏以特定字母开头的所有员工。
由于这个网页的访问量很大，所以这个解决方法必须尽量节约带宽。因为这个问题中网页的大小很重要，所以我们决定只为那些需要查看员工资料的用户
加载这种数据，这样一来，那些不关心这种信息的用户就不用下载额外的数据。这是虚拟代理可以大显身手的地方，因为它能够把需要占用大量带宽的资源
的加载推迟到必要的时候。首先要做的是创建代理的那个本体类，它负责获取员工数据并生成，用于在网页上显示这些数据的HTML内容

var Directory = new Interface('Directory',['showPage']);
var PersonalDirectory = function(parent){
	this.xhrHandler = new SimpleHandler();
	this.parent = parent;
	this.data = null;
	this.currentPage = null;
	var that = this;
	var callback = {
		success: that._configure,
		failure：function(){
			throw new Error('personalDirectory: failure in data retrieval');
		}
	};
	xhrHandler.request('GET','directoryData.php',callback);
};
PersonalDirectory.prototype = {
	_configure: function(responseText){
		this.data = eval('('+ responseText +')');
		this.currentPage = 'a';
	},
	showPage: function(page){
		$('page-' + this.currentPage).style.display = 'none';
		$('page-' + page).style.display = 'block';
		this.currentPage = page;
	}
};
/*
	该类的构造函数会发出一个xhr请求以获取员工数据，其一configure方法会在数据返回的时候被调用，它会生成HTML元素并向其中填入数据，该类实现了一个目录
	应有的所有功能。这个类的实例化过程中会加载大量数据、代理的作用就是推迟这个实例化过程。
*/
//下面先勾勒出虚拟代理的大体轮廓，它包含了该类需要的所有方法
var DirectoryProxy = function(){};
Directory.prototype = {
	showPage: function(){}
};

//下一步是先将这个类实现为一个无用的代理，它的每个方法所做的只是调用本体的同名方法
var DirectoryProxy = function(){
	this.directory = new PersonalDirectory(parent);
}
Directory.prototype = {
	showPage: function(page){
		return this.directory.showPage(page);
	}
};
//现在这个代理可以代替PersonalDirectory的实例使用，它们可以透明互换，不过在此情况下你丝毫没有享受到虚拟代理的好处，要想发挥
虚拟代理的作用，需要创建一个用来实例化本体的方法，并注册一个用来触发这个实例化过程的事件侦听器

var DirectoryProxy = function(parent){
	this.parent = parent;
	this.directory = null;
	var that = this;
	addEvent(parent,'mouseover',function(){
		that._initialize();
	});
};
DirectoryProxy.prototype = {
	_initialize: function(){
		this.directory = new PersonalDirectory(this.parent);
	},
	showPage: function(page){
		return this.directory.showPage(page);
	}
};
//在本例中，一旦用户把鼠标指针移到目录的父容器上方，本体就会被实例化。在更复杂的解决方案中，可以先为目录生成一个空白的用户界面，
一旦某个表单域处于焦点之下，它就会被初始化后的本体透明地取代。这个例子已经接近于完工。剩下的任务只有一件，那就是提示用户当前正在
加载员工目录，并且在本体创建完毕之前阻止任何方法调用：
var DirectoryProxy = function(parent){
	this.parent = parent;
	this.directory = null;
	this.warning = null;
	this.interval = null;
	this.initialized = false;
	var that = this;
	addEvent(parent,'mouseover',function(){
		that._initialize();
	});
};
DirectoryProxy.prototype = {
	_initialize: function(){
		this.warning = document.createElement('div');
		this.parent.appendChild(this.warning);
		this.warning.innerHTML = 'the company directory is loading...';
		this.directory = new PersonalDirectory(this.parent);
		var that = this;
		this.interval = setInterval(function(){
			that._checkInitialization();
		},100);
	},
	_checkInitialization: function(){
		if(this.directory.currentPage !== null){
			clearInterval(this.interval);
			this.initialized = true;
			this.parent.removeChild(this.warning);
		}
	},
	showPage: function(){
		if(!this.initialized){
			return;
		}
		return this.directory.showPage(page);
	}
};
代理模式之利：
虚拟代理可以用来把大对象的实例化推迟到其他元素加载完毕之后。如果虚拟代理包装的资源没有被用到那么它根本不会被加载。虚拟代理的好处就在于，
你可以用它代替主体，而不用操心实例化开销的问题。
代理模式之弊：
代理可以掩盖大量复杂行为，这会带来不必要的复杂性和代码。因为代理与其本体完全可以互换。在为创建一个代理费心劳力之前，请确保你确实需要它
提供的特性。且它能降低你的代码的冗余程度，提高其模块化或者运行效率



