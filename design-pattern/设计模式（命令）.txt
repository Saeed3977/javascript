命令模式Command:
	该节研究的是一种封装方法调用的方式，命令模式与普通函数有所不同，它可以用来对方法调用进行参数化处理和传送，
	经过这样处理的方法调用可以再任何时候执行。命令模式可以用来消除调用操作的对象和实现操作的对象之间的耦合，这
	为各种具体的类的更换带来了极大的灵活性。这种模式可以用在许多不同的场合，不过它在创建用户界面这一方面非常有用，
	特别是在需要不受限的取消操作的时候。
	
	命令模式的结构：
	最简单形式命令对象是一个操作（execute）和用以调用这个操作的对象(实施者)的结合体；
	所有的命令对象都有一个执行操作。其用途就是调用命令对象所绑定的操作；
	在大多数命令对象中，这个操作是一个名为execute或者run方法；
	
	//section1:
	场景：
	你有一个广告公司，想设计一个网页
	客户可以在上面执行一些与自己账户相关的操作，比如启用或者停止某些广告
	因为不知道具体广告数量，你想设计一个尽可能灵活的UI
	你打算用命令模式来弱化按钮之类的用户界面元素与其后续操作之间耦合
	
	var Interface = function(){};,
		adCommand = new Interface('adCommand',['execute']);
	接下来需要定义两个类，分别用来封装广告的start和stop方法
	var stopAd = function(adObject){
		this.ad = adObject;
	};
	StopAd.prototype.execute = function(){
		this.ad.stop();
	};
	var startAd = function(adObject){
		this.ad = adObject;
	};
	startAd.prototype.execute = function(){
		this.ad.start();
	};
	这是两个非常典型的命令类，他们的构造函数以另一个对象为参数，而他们实现的execute方法
	则要调用该对象的某个方法。现在有了两个可用在用户界面的类，他们具有相同的接口。你不用
	知道也不需要知道adObject的具体实现细节，只要它实现了start和stop方法就行。借助于命令
	模式，可以实现用户界面对象与广告对象的隔离。
	下面的代码创建的用户界面中，用户名下的每个广告都有两个按钮，分别用于启动和停止广告的轮播。
	var ads = getAds();
	for(var i=0,len=ads.length; i<len; i++){
		var startCommand = new StartAd(ads[i]),
			stopCommand = new StopAd(ads[i]);
		new UiButton('Start'+ads[i].name,startCommand);
		new UiButton('Stop'+ads[i].name,stopCommand);
	}
	UiButton类的构造函数有两个参数：一个是按钮上的文字，另一个是命令对象。它会在网页上生成一个按钮
	按钮被点击的时候会执行那个目录对象的execute方法，所以把任何一种命令对象提供给UiButton,后者都知
	道如何跟他打交道。这有助于创建高度模块化和低耦合的用户界面。
	
	//section2:
	用闭包创建命令对象
	还有另外一种方法来封装函数，这种办法不需要创建一个具有execute方法的对象。而是把想要执行的方法包装
	在闭包中，如果想要创建的目录对象像前例中那样只有一个方法，那么这种方法尤其方便。现在你不需要调用
	execute方法，因为那个命令可以作为函数直接执行，这样还可以省却作用域和this关键字绑定这方面的烦恼。
	function makeStart(adObject){
		return function(){
			addObject.start();
		}
	}
	function makeStop(adObject){
		return function(){
			addObject.stop();
		}
	}
	var startCommand = makeStart(ads[0]),
		stopCommand = makeStop(ads[0]);
	startCommand();
	stopCommand();
	这些命令函数可以像命令对象一样四处传递，并且在需要的时候执行。他们是正式的命令对象类的简单替代品，
	但是这个并不适用于需要多个命令方法的场合。
	
	//section3:
	命令模式的三种角色：客户，调用者和接收者
	对此你对命令模式已经有了一个大概了解，我们现在做点正式说明。命令模式的系统中有三个参与者：客户，
	调用者和接收者。客户负责实例化命令并将其交给调用者，在前面的例子中for循环中的代码就是客户，他通常
	被包装为一个对象，但是这不是必然的。调用者接过命令并将其保存下来。它会在某个时候调用该命令对象的
	execute方法，或者将其交给另一个潜在的调用者。前例中的调用者就是UiButton类创建的按钮，调用者进行
	commandObject.execute这种调用时，它所调用的方法将转而以receiver.action()这种形式调用恰当的方法。
	前例中的接收者就是广告对象，它所执行的操作，要么就是start方法，要么就是stop方法。
	什么参与者执行什么任务有时不太好记。这里在重复一遍：客户创建命令，调用者执行该命令，接收者在命令执行
	时执行相应具体操作。所有命令模式都有客户和调用者，但不一定有接收者。因为可能直接把具体操作封装在了
	客户对象中。
	所有类型的命令对象执行的都是同样的任务：隔离调用操作的对象和实际实施操作的对象。这个定义所涵盖的区间
	有两种极端情况，前面创建的那种命令对象属于区间一端，这种情况下的命令对象所起的作用只不过是把接收者的
	操作（广告对象的start和stop方法）与调用者绑定在一起。这类命令对象最简单，其模块化程度也最高，他们与
	客户，接收者和调用者之间只是松散的耦合在一起。
	var SimpleCommand = function(receiving){
		this.receiving = receiving;
	}
	SimpleCommand.prototype.execute = function(){
		this.receiving.action();
	};
	位于区间的另一端则是那种封装着一套复杂指令的对象，这种对象实际上没有接收者（前面刚提到），因为他们自己
	提供了操作的具体实现。它并不把操作委托给接收者实现，所有用于实现相关操作的代码都包含在其内部：
	var ComplexCommand = function(){
		this.logger = new Logger();
		this.xhrHandler = XhrManager.createXhrHandler();
		this.parameters = {};
	};
	ComplexCommand.prototype = {
		setParameter: function(key,value){
			this.parameter[key] = value;
		},
		execute: function(){
			this.logger.log('executing command');
			var postArray = [];
			for(var key in this.parameters){
				postArray.push(key + '=' + this.parameters[key]);
			}
			var postString = postArray.join('&');
			this.xhrHandler.request('POST','script.php',function(){},postString);
		}
	};
	这两种极端之间存在一个灰色地带，有些命令对象不但封装了接收者的操作，而且其execute方法也具有一些实现代码，
	这类命令对象位于定义区间的中间地段：
	var GreyAreaCommand = function(receiver){
		this.logger = new Logger();
		this.receiver = receiver;
	}
	GreyAreaCommand.prototype.execute = function(){
		this.logger.log('Executing command');
		this.receiver.prepareAction();
		this.receiver.action();
	};
	这些类型的命令对象各有各的用处，他们都能在项目中找到自己的位置。简单的命令对象一般用来消除两个对象（接收者
	和调用者）之间的耦合，而复杂的命令对象一般用来封装不可分的或事务性的指令。
	
	//section4
	这个示例演示了如何用最简单的命令对象构建模块化的用户界面。我们设计一个用来生成桌面应用程序风格的菜单栏的类，
	并通过使用命令对象，让这些菜单执行各种操作。借助于命令模式，我们可以把调用者（菜单项一）和接收者（实际执行的程序）
	隔离开。那些菜单不必了解接收者的方法，他们只需要知道所有命令对象都实现了一个execute方法就行。这意味着同样的命令
	对象也可以被工具栏图标等其他用户界面元素使用，而且不需要修改。
	这里没有给出接收者类的实现代码，其出发点在于你只需要知道接收者有些什么操作可供调用即可
	FileActions
		--open
		--close
		--save
		--saveAS
	EditActions
		--cut
		--copy
		--paste
		--delete
	InsertActions
		--textBlock
	HelpActions
		-showHelp
	前面说过，接口在命令模式中起着非常重要的作用。这种作用在本例中尤其突出，这是因为我们还要为菜单使用组合模式，而组合
	对象又严重依赖接口，本例定义三个接口：
	var Command = new Interface('Command',['execute']),
		Composite = new Interface('Composite',['add','remove','getChild','getElement']),
		MenuObject = new Interface('MenuObject',['show']);
	菜单组合对象：
	接下来要实现的是MenuBar,Menu,MenuItem类，作为一个整体，他们要能显示所有可用操作，并且根据要求调用这些操作。MenuBar和
	Menu都是组合类对象，而MenuItem则是叶类，MenuBar类保存着所有Menu实例：
	var MenuBar = function(){
		this.menus = {};
		this.element = document.createElement('ul');
		this.element.style.display = 'none';
	};
	MenuBar.prototype = {
		add: function(menuObject){
			Interface.ensureImplements(menuObject,Composite,MenuObject);
			this.menus[menuObject.name] = menuObject;
			this.element.appendChild(this.menus[menuObject].name.getElement());
		},
		remove: function(name){
			delete this.menus[name];
		},
		getChild: function(name){
			return this.menus[name];
		},
		getElement: function(){
			return this.element;
		},
		show: function(){
			this.element.style.display = 'block';
			for(var name in this.menus){
				this.menus[name].show();
			}
		}
	};
	MenuBar是一个很简单的组合对象类。它会生成一个无序列表标签，并且提供了这个列表中添加菜单对象的方法。Menu类于此类似，
	不过它管理的是MenuItem实例：
	var Menu = function(name){
		this.name = name;
		this.items = {};
		this.element = document.createElement('li');
		this.element.innerHTML = this.name;
		this.element.style.display = 'none';
		this.container = document.createElement('ul');
		this.element.appendChild(this.container);
	};
	Menu.prototype = {
		add: function(menuObject){
			Interface.ensureImplements(menuObject,Composite,MenuObject);
			this.items[menuObject.name] = menuObject;
			this.element.appendChild(this.items[menuObject.name].getElement());
		},
		remove: function(name){
			delete this.items[name];
		},
		getChild: function(name){
			return this.items[name];
		},
		getElement: function(){
			return this.element;
		},
		show: function(){
			this.element.style.display = 'block';
			for(var name in this.items){
				this.items[name].show();
			}
		}
	};
	值得一提的是，Menu类的item属性只是起着一个查找表的作用，他不会保存菜单项的次序信息。菜单项的次序有DOM负责保持，每
	一条新添加的菜单项，都被添加在已有菜单项之后，如果要求能够对菜单项的次序进行重排，那么可以把items属性实现为数组。
	真正让人感兴趣的是MenuItem类，这是系统的调用者，MenuItem实例被用户点击时，会调用与其绑定在一起的命令对象。为此需要
	确保传入构造函数的命令对象实现了execute方法，然后再为MenuItem对象对应的标签注册click事件处理器中加入调用他们的语句
	var MenuItem = function(name,command){
		Interface.ensureImplements(command,Command);
		this.name = name;
		this.element = document.createElement('li');
		this.element.style.display = 'none';
		this.auchor = document.createElement('a');
		this.anchor.href = '#';
		this.element.appendChild(this.anchor);
		this.auchor.innerHTML = this.name;
		addEvent(this.auchor,'click',function(e){
			e.preventDefault();
			command.execute();
		});
	};
	MenuItem.prototype = {
		add: function(){},
		remove: function(){},
		getChild: function(){},
		getElement: function(){
			return this.element;
		},
		show: function(){
			this.element.style.display = 'block';
		}
	};
	命令模式的作用开始显现出来，你可以创建一个包含有许多菜单的非常复杂的菜单栏，而每个菜单栏都包含着一些菜单项，
	这些菜单项对如何执行自己所绑定的操作一无所知，它们也不需要知道那些细节，它们惟一需要知道的就是命令对象有一个
	execute方法。
	每个MenuItem都与一个命令对象绑定在一起，这个命令对象不能再改变，因为它被封装在一个事件监听器的闭包中，如果想
	改变菜单项所绑定的命令，必须另外创建一个新的MenuItem对象。
	
	
	
	
	
	
	
	