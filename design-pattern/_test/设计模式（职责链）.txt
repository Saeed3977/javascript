职责链模式：
对于一个请求，多个对象都可以处理该请求，但是到底哪个对象要处理该请求在开发期是不确定的，也就是说请求的发送者和接收者是
一种动态的关系。所以需要将这些对象链成一条链，并沿着这条链传递该请求，链上的对象要么处理该请求，要么传递给下一个对象，从
而避免了请求的发送者和接受者之间的耦合关系。

流程：
1.发送者知道链中的第一个接受者，它向这个接受者发送请求；
2.链中的接受者对该请求进行分析，然后要么处理该请求要么传递给下一个对象;
3.每个接受者知道的其他对象只有一个，那就是它在链中的下家;
4.如果没有任何接受者处理该请求，那么请求将从链中离开，不同的实现对此也有不同的反应，一般会抛出一个错误。

适用场合：
若事先不知道在几个对象中有哪些能够处理请求，那么就属于应该适用职责链的情况；
若这批处理器对象在开发期间不可知，而是需要动态指定的话，那么也应该使用这种模式；
该模式还可以用在对于每个请求都不止有一个对象可以对它进行处理的情况；
使用这种模式可以把特定的具体类与客户端隔离开，并代之以一条有弱耦合对象组成的链，它将隐式地对请求进行处理，这有助于提高代码的
模块程度和可维护性。

//section1
图书馆示例，实现几种目录对象，以便按不同标准对图书进行分类。发送者是图书，接收者是分类。

//没有采用职责链模式前
var PublicLibrary = function(books){
	this.catalog = {};
	this.biographyCatalog = new BiographyCatalog();
	this.fantasyCatalog = new FantasyCatalog();
	this.mysteryCatalog = new MysteryCatalog();
	for(var i=0,len=books.length; i<len; i++){
		this.addBook(books[i]);
	}
};
PublicLibrary.prototype = {
	findBooks: function(){},
	checkoutBooks: function(){},
	returnBook: function(){},
	addBook: function(book){
		this.catalog[book.getIsbn()] = {
			book: book,
			available: true
		};
		this.biographyCatalog.handlerFillingRequest(book);
		this.fantasyCatalog.handlerFillingRequest(book);
		this.mysteryCatalog.handlerFillingRequest(book);
	}
};


前面这段代码可以奏效，不过其中固化了n个不同类的依赖。如果想要增加更多图书类别，那就需要修改构造函数和addBook方法这两处的代码。
此外把这些目录类别固化在构造函数中也没有太大意义。因为PublicLibrary的不同实例可能希望拥有完全不同的一套分类目录。而你也不可能
在对象实例化再修改其支持的类别。这些理由都充分说明了前面方法的并不可取。

//采用职责链模式优化后
图书馆知道第一个接收者firstGenreCatalog,addBook添加图书时，直接调用第一个接收者分类接口。第一个接收者判断该图片是否属于自己这一类，
属于则将该图书添加到本类中。然后再调用下一个接收者分类接口，以此类推，一个一个接收者处理下去，直到没有下一个接收者。
var PublicLibrary = function(books,firstGenreCatalog){
	this.catalog = {};
	this.firstGenreCatalog = firstGenreCatalog;
	for(var i=0,len=books.length; i<len; i++){
		this.addBook(books[i]);
	}
};
PublicLibrary.prototype = {
	addBook: function(book){
		this.catalog[book.getIsbn()] = {
			book: book,
			available: true
		};
		this.firstGenreCatalog.handleFillingRequest(book);
	},
	findBook: function(book){
		var target = this.catalog[book.getIsbn()];
		if(target){
			return target;
		}
		return 'not found the book';
	},
	returnBook: function(){},
	checkoutBook: function(){}
};

var GenreCatalog = function(){
	this.catalog = [];
};
GenreCatalog.prototype = {
	_bookMatch: function(){},
	setSuccessor: function(nextCatalog){
		this.nextCatalog = nextCatalog;
	}
	handlerFillingRequest: function(book){
		if(this._bookMatch(book)){
			this.catalog.push(book);
		}
		if(this.nextCatalog){
			this.nextCatalog.handlerFillingRequest(book);
		}
	}
};

var nextCatalog = function(){
	GenreCatalog.apply(this,arguments);
};
nextCatalog.prototype = {
	_bookMatch: function(){},
	handlerFillingRequest: function(){
		//...
	}
};
//这个改进非常明显。现在需要保存的只是指向分类目录链中第一个环节的引用。如果想把一本新书编入各种分类目录中，只需要将其传递
给链中第一个目录对象即可。第一个目录要么把它编入自己目录中，要么不编，然后改目录会将请求传递到下一个目录。因为一本图书可以
属于不止一个类别，所以每个目录都会把请求往下传递。现在不再有固化在代码中的依赖，所有分类目录都在外部实例化，因为不同的PublicLibrary
实例能够使用不同的分类。你随时都可以在链中加入新的目录。
var genreCatalogIns = new GenreCatalog();
var nextCatalogIns = new nextCatalog();
genreCatalogIns.setSuccessor(nextCatalogIns);
//...
var publicLibraryIns = new PublicLibrary(books,genreCatalogIns);


//section2:
职责链模式经常和组合模式一起使用，这样可以在现有层次体系中实现这种模式往往更加
容易，因为组合模式已经建立了一个对象层次体系，因此在此基础上添加一些用来处理（或者传递）请求的方法很简单。在组合模式结合了
职责链之后，方法调用就不再总是不加分辨地往下一直传递到叶子对象。此时每一层都要对请求进行分析，以判断当前位置的对象应该处理
它还是应该把它往下传递。组合对象实际上也会承担部分工作，而不是单纯依靠叶对象执行所有操作。这样一来就不用单独实现一些对象来
作为链上的环节，也不用手工设定下家对象。职责链模式和组合模式的结合对双方都是一种优化。由于职责链是现成的对于组合模式来讲，
所以设置代码的数量和用于职责链的额外对象的数目都减少了。由于组合层次体系中某个方法可能会在高层得到处理，所以在整个树上执行
方法所需的计算量也降低了。DOM里面的事件冒泡机制也有类似的地方（不论在捕获还是冒泡阶段，每一级Dom都可以停止事件传播也可以让其
继续沿着层级体系向上或向下传播）。其实在express框架中的中间件connect实现上也可以看做是采用了职责链模式.

/*
	图片库的进一步讨论
*/
var composite = new Interface('Composite',['add','remove','getChild']);
var galleryItem = new Interface('GalleryItem',['hide','show']);

var DynamicGallery = function(id){
	this.children = [];
	this.element = document.createElement('div');
	this.element.id = id;
	this.element.className = 'dynamic-gallery';
};
DynamicGallery.prototype = {
	add: function(child){
		this.children.push(child);
		this.element.appendChild(child.getElement());
	},
	remove: function(child){
		for(var i=0,len=this.children.length; i<len; i++){
			if(child == this.children[i]){
				this.children.splice(i,1);
				break;
			}
		}
	},
	getChild: function(i){
		return this.children[i];
	},
	hide: function(){
		for(var node, i=0; node=this.getChild(i); i++){
			node.hide();
		}
		this.element.style.display = 'none';
	},
	show: function(){
		this.element.style.display = '';
		for(var node,i=0; node=this.getChild(i); i++){
			node.show();
		}
	},
	getElement: function(){
		return this.element;
	}
};

var GalleryImage = function(src){
	this.element = document.createElement('img');
	this.element.className = 'gallery-image';
	this.element.src = src;
};
GalleryImage.prototype = {
	add: function(){},
	remove: function(){},
	getChild: function(){},
	hide: function(){
		this.element.style.display = 'none';
	},
	show: function(){
		this.element.style.display = '';
	},
	getElement: function(){
		return this.element;
	}
};
/*
	用职责链提高组合的效率
	在组合对象中，hide和show方法先对本层次的一个样式属性进行设置，然后将调用传递给所有子对象，这是一种缜密的作法，但是效率不高。由于元素的display样式属性会
	被所有子元素继承，因此没有必要把方法调用向层次体系的下层继续传递。更好的作法是将这些方法作为沿职责链传递的请求实现。这样做需要知道什么时候应该停止以及什么
	时候应该将它传递给子节点。这正是职责链模式的核心：懂的什么时候处理请求以及什么时候传递请求，每个组合对象节点和叶子节点都有两种状态：显示和隐藏。hide请求根本
	不需要传递，因为用css隐藏组合节点后左右子节点也将会自动隐藏。show请求则总是要传递，因为无法预知组合对象的子节点的显示状态。我们做的第一个优化是从hide方法中
	删除将方法传递到子节点的部分代码：
*/

var DynamicGallery = function(id){
	this.children = [];
	this.element = document.createElement('div');
	this.element.id = id;
	this.element.className = 'dynamic-gallery';
};
DynamicGallery.prototype = {
	add: function(child){
		this.children.push(child);
		this.element.appendChild(child.getElement());
	},
	remove: function(child){
		for(var i=0,len=this.children.length; i<len; i++){
			if(child == this.children[i]){
				this.children.splice(i,1);
				break;
			}
		}
	},
	getChild: function(i){
		return this.children[i];
	},
	hide: function(){
		/*
			for(var node, i=0; node=this.getChild(i); i++){
				node.hide();
			}
		*/
		this.element.style.display = 'none';
	},
	show: function(){
		this.element.style.display = '';
		for(var node,i=0; node=this.getChild(i); i++){
			node.show();
		}
	},
	getElement: function(){
		return this.element;
	}
};

/*
	为图片添加标签
	标签是一个描述性的标题，可以用来对图片进行分类，图片和图片库都可以添加标签。为图片库添加标签实际上相当于让其中的所有图片
	都使用这个标签。你可以在层次体系的任何层次上搜索具有指定标签的所有图像。这正是职责链优化的地方，如果在搜索过程中遇到一个
	具有所请求的标签的组合对象节点，那就可以停止请求并将该节点的所有叶节点作为结果返回：
*/
var Composite = new Interface('Composite',['add','remove','getChild','getAllLeaves']);
var GalleryItem = new Interface('GalleryItem',['hide','show','addTag']);
var DynamicGallery = function(id){
	this.children = [];
	this.tags = [];
	this.element = document.createElement('div');
	this.element.id = id;
	this.element.className = 'dynamic-gallery';
};
DynamicGallery.prototype = {
	addTag: function(tag){
		this.tags.push(tag);
		for(var node,i=0; node=this.getChild(i); i++){
			node.addTag(tag);
		}
	},
	getAllLeaves: function(){
		var leaves = [];
		for(var node,i=0; node=this.getChild(i); i++){
			leaves = leaves.concat(node.getAllLeaves());
		}
		return leaves;
	},
	/*
		职责链优化，首先判断当前对象是否能处理请求，具体做法就是在当前对象的tags数组中检查指定的标签，如果能找到，那就表明层次体系中
		当前这个组合对象的所有子对象也都将具有这个标签，此时可以停止搜索，然后在这个层次上处理请求。如果找不到指定标签，则将请求传递
		给每一个子对象，并返回结果
	*/
	getPhotoWithTag: function(tag){
		for(var i=0,len=this.tags.length; i<len; i++){
			if(this.tags[i] == tag){
				return this.getAllLeaves();
			}
		}
		for(var results=[],node,i=0; node=this.getChild(i); i++){
			results = results.concat(node.getPhotoWithTag(tag));
		}
		return results;
	}
};

var GalleryImage = function(src){
	this.element = document.createElement('img');
	this.element.className = 'gallery-iamge';
	this.element.src = src;
	this.tags = [];
};
GalleryImage.prototype = {
	addTag: function(tag){
		this.tags.push(tag);
	},
	getAllLeaves: function(){
		return [this];
	},
	getPhotoWithTag: function(tag){
		for(var i=0,len=this.tags.length; i<len; i++){
			if(this.tags[i] ==  tag){
				return [this];
			}
		}
		return [];
	}
};


职责链模式之利：
借助于职责链模式，可以动态选择由哪个对象处理请求，这意味着你可以使用只有在运行期间才能知道的条件来把任务分配给最恰当的对象。
还可以使用这个模式消除发出请求的对象与处理请求的对象之间的耦合。藉此你可以在模块的组织方面获得更大的灵活性，而且在重构和修改
代码的时候不用担心会把类名固化在算法中。
职责链模式之弊：
由于在职责链模式中，请求与具体的处理程序被隔离开来，因为无法保证它一定会被处理，而不是径直从链尾离开。这种模式的接收者是隐式的，
因此无法得知如果请求能够得到处理的话具体由哪个对象处理。
