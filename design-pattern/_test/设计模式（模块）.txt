模板模式
定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即
可以重新定义该算法的某些特定步骤。其本质是固定算法骨架。
模板模式的功能在于固定算法骨架，而让具体算法实现可扩展。模板方法模式还额外提供了一个好处，就是可以
控制子类的扩展。因为在父类中定义好了算法的步骤，只是在某几个固定的点才会调用到被子类实现的方法，因此
也就只允许在这几个点来扩展功能，这些可以被子类覆盖以扩展功能的方法通常被称之为“钩子方法”。要特别注意
模板模式中的变与不变，不变的是固定方法和算法骨架，而需要变化的地方是通过抽象方法，把具体实现延迟到子
类中了，而且还通过父类的定义来约束子类的行为，从而使系统能有更好的复用性和扩展性。作为父类的模板会在
需要的时候调用子类相应的方法，也就由父类来找子类，而不是让子类来找父类（好莱坞法则）。


//section1
	(function(){
		//模板抽象类
		function AbstractClass(){}
		AbstractClass.prototype = {
			doPrimitiveOperation1: function(){
				//...
			},
			domPrimitiveOperation2: function(){
				//...
			},
			templateMethod: function(){
				this.doPrimitiveOperation1();
				this.domPrimitiveOperation2();
			}
		};
		
		//具体模板类
		function ConcreteClass(){}
		ConcreteClass.prototype = {
			__proto__: AbstractClass.prototype,
			doPrimitiveOperation1: function(){
				//具体操作1
			},
			domPrimitiveOperation2: function(){
				//具体操作2
			}
		};
	})();

//section2:验证人员登录
	function LoginModel(){
		this.loginId;
		this.pwd;
	}
	
	//抽象模板类
	function LoginTemplate(){}
	LoginTemplate.prototype = {
		login: function(loginModel){
			var dlLm = this.findLoginUser(loginModel.loginId);
			if(dlLm){
				//对密码进行加密
				var encryptPwd = this.encryptPwd(loginModel.pwd);
				//把加密后的密码设置到登录数据模型中
				loginModel.pwd = encryptPwd;
				//判断是否匹配
				return this.match(loginModel,dbLm);
			}
		},
		findLoginUser: function(loginId){},
		encryptPwd: function(pwd){
			return pwd;
		},
		match: function(lm,dbLm){
			return lm.loginId == dbLm.loginId && lm.pwd == dbLm.pwd;
		}
	};
	
	//具体模板类（普通用户登录控制的逻辑）
	function NormalLogin(){}
	NormalLogin.prototype = {
		__proto__ : LoginTemplate.prototype,
		findLoginUser: function(loginId){
			var lm = new LoginModel();
			lm.loginId = loginId;
			lm.pwd = 'testpwd';
			return lm;
		}
	};
	
	//具体模板类（工作人员登录控制逻辑）
	function WorkerLogin(){}
	WorkerLogin.prototype = {
		__proto__: LoginTemplate,
		findLoginUser: function(loginId){
			var lm = new LoginModel();
			lm.loginId = loginId;
			lm.pwd = 'workerpwd';
			return lm;
		},
		encryptPwd: function(pwd){
			console.log('使用md5加密');
			return pwd;
		}
	};
	
	var lm = new LoginModel();
	lm.loginId = 'admin';
	lm.pwd = 'workerpwd';
	
	var lt = new WorkerLogin();
	var lt2 = new NormalLogin();
	
	var flag = lt.login(lm);
	console.log('可以登录工作平台' + flag);
	var flag2 = lt2.login(lm);
	console.log('不可以进行普通人员登录' + flag2);
	
//section3
	function test(){
		var crypto = require('crypto');
		function createHmac(){
			return crypto.createHmac('sha1','password');
		}
		
		//封装进行登录控制所需要的数据
		function LoginModel(){
			this.loginId;
			this.pwd;
		}
		
		//登录控制的模板
		function LoginTemplate(){}
		LoginTemplate.prototype = {
			login: function(loginModel){
				var dbLm = this.findLoginUser(loginModel.loginId);
				if(dbLm){
					var encryptPwd = this.encryptPwd(loginModel.pwd);
					loginModel.pwd = encryptPwd;
					return this.match(loginModel,dbLm);
				}
				return false;
			},
			findLoginUser: function(loginId){},
			encryptPwd: function(pwd){
				return pwd;
			},
			match: function(lm,dbLm){
				return lm.loginId == dbLm.loginId && lm.pwd == dbLm.pwd;
			}
		};
		
		
		function createLoginClass(prop){
			Template.prototype = loginTemplate.prototype;
			return Template;
			function Template(){
				for(var i in prop){
					if(!prop.hasOwnProperty(i)) continue;
					this[i] = prop[i];
				}
			}
		}
		
		var NormalLogin = createLoginClass({
			findLoginUser: function(loginId){
				var lm = new LoginModel();
				lm.loginId = loginId;
				lm.pwd = 'testpwd';
				return lm;
			}
		});
		
		var WorkerLogin = createLoginClass({
			findLoginUser: function(loginId){
				var lm = new LoginModel();
				lm.loginId = loginId;
				lm.pwd = createHmac().update('workerpwd').digest('hex');
				return lm;
			},
			encryptPwd: function(pwd){
				return createHmac().update(pwd).digest('hex');
			}
		});
		
		var lm = new LoginModel();
		lm.loginId = 'admin';
		lm.pwd = 'workerpwd';
		var lt = new WorkerLogin();
		var lt2 = new NormalLogin();
		var flag = lt.login(lm);
		console.log('可以登录工作平台' + flag);
		var flag2 = new lt2.login(lm);
		console.log('不可以登录普通用户' + flag);
	}
	

//section4(扩展登录控制)
	function NormalLoginModel(){
		LoginModel.call(this);
		this.question;
		this.answer;
	}
	
	function NormalLogin2(){}
	NormalLogin2.prototype = {
		__proto__: LoginTempalte,
		findLoginUser: function(loginId){
			var nlm = new NormalLoginModel();
			nlm.loginId = loginId;
			nlm.pwd = 'testpwd';
			nlm.question = 'testQuestion';
			nlm.answer = 'testAnswer';
			return nlm;
		},
		match: function(lm,dblm){
			var f1= LoginTemplate.prototype.match.apply(this,arguments);
			if(f1){
				return dblm.question == lm.question && dblm.answer == lm.answer;
			}
			return false;
		}
	};
	
	var nlm = new NormalLoginModel();
	nlm.loginId = 'testUser';
	nlm.pwd = 'testpwd';
	nlm.question = 'testQuestion';
	nlm.answer = 'testAnswer';
	var lt3 = new NormalLogin2();
	var flag3 = lt3.login(nlm);
	console.log('可以进行普通人员加强版登录' + flag3);
	

