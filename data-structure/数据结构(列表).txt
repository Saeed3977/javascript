定义：
列表是一组有序的数据，每个列表中的数据项称为元素，在javascript列表中的元素可以是任意
数据类型，列表中可以保存多少元素没有事先限定，实际使用时元素的数量受到程序内存的限制。
不包含任何元素的列表称为空列表，列表中包含元素的个数称为列表的length，在内部实现上，用
一个变量listSize保存列表中元素的个数。可以在列表末尾append一个元素，也可以在一个给定
元素或列表的起始位置insert一个元素，使用remove方法从列表中删除元素，使用clear方法清空
列表中的所有元素。还可以使用toString()方法显示列表中的所有元素，使用getElement()方法
显示当前元素。列表拥有描述元素位置的属性，列表有前有后（分别对应front和end）。使用next
方法可以从当前元素移动到下一个元素，使用prev()方法可以移动到当前元素的前一个元素。还可以
使用moveTo(n)方法直接移动到指定位置,这里的n表示要移动到第N个位置,currPos属性表示列表中
的当前位置。

/*
	List:抽象列表数据类型定义
	listSize: 列表的元素个数
	pos: 列表的当前位置
	length: 列表中元素的个数
	clear: 清空列表中的所有元素
	toString: 返回列表的字符串形式
	getElement: 返回当前位置的元素
	insert: 在现有元素后插入元素
	append： 在列表的末尾添加新元素
	remove: 从列表中删除元素
	front: 将列表的当前位置移动到第一个元素
	end: 将列表的当前位置移动到最后一个元素
	prev: 将当前位置前移一位
	next: 将当前位置后移一位
	currPos: 返回列表的当前位置
	moveTo: 将当前位置移动到指定位置
*/

function List(){
	this.listSize = 0;
	this.pos = 0;
	this.dataStore= [];
	this.clear = clear;
	this.find = find;
	this.toString = toString;
	this.insert = insert;
	this.append = append;
	this.remove = remove;
	this.front = front;
	this.end = end;
	this.prev = prev;
	this.next = next;
	this.lenght = length;
	this.currPos = currPos;
	this.moveTo = moveTo;
	this.getElement = getElement;
	this.contains = contains;
}

function append(element){
	this.dataStore[this.listSize++] = element;
}

function find(element){
	var ret = -1;
	this.dataStore.forEach(function(item,index){
		if(item == element){
			ret = index;
		}
	});
	return ret;
}

function remove(element){
	var index = this.find(element);
	if(index > -1){
		this.dataStore.splice(index,1);
		--this.listSize;
		return true;
	}
	return false;
}

function insert(element,afer){
	var index = this.find(after);
	if(index > -1){
		this.dataStore.splice(index+1,0,element);
		++this.listSize;
		return true;
	}
	return false;
}

function clear(){
	this.dataStore = [];
	this.listSize = this.pos = 0;
}

function contains(element){
	return this.dataStore.indexOf(element);
}

function front(){
	this.pos = 0;
}

function end(){
	this.pos = this.listSize - 1;
}

function prev(){
	if(this.pos > 0){
		--this.pos;
	}
}

function next(){
	if(this.pos < this.listSize - 1){
		++this.pos;
	}
}

function currPos(){
	return this.pos;
}

function moveTo(position){
	this.pos = position;
}

function getElement(){
	return this.dataStore[this.pos];
}

//使用迭代器遍历列表
for(name.front(); names.currPos()<names.length(); names.next()){
	print(names.getElement());
}