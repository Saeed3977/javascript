链表：
链表是由一组节点组成的集合。每个节点都使用一个对象的引用指向它的后继，指向另一个节点的引用
叫做链。数组元素靠它们的位置进行引用，链表元素则是靠相互之间的关系进行引用。遍历链表就是跟着
链接从链表的首元素一直走到尾元素，链表的尾元素指向一个null节点。链表中插入一个节点的效率很高
需要修改它前面的节点，从其指向新加入的节点，而新加入的节点则指向原来前驱指向的节点。从链表中
删除一个元素也很简单。将待删除的元素的前驱节点指向待删除元素的后继节点，同时将待删除元素指向
null,元素就删除成功了。但遗憾的是链表中查找数据项不是那么容易，查找必须从头开始依次访问链表中
的每一个数据项，直到找到为止，平均需要访问N/2个数据项，这时可以考虑其他数据结构比如二叉树和有
序数组等。

链表的效率：
在表头插入和删除速度很快，仅需要改变一两个引用值，平均起来查找，删除和在指定连接点后面插入都
需要搜索链表中的一半链接点，在数组也是一样，但链表仍然要快一些，因为当插入和删除链接点时，链表
不需要移动任何东西，增加的效率是很显著的，特别是当复制时间远远大于比较时间的时候。当然，链表比
数组优越的另外一个重要方面是链表需要多少内存就可以用多少内存，并且可以扩展到所有内存。数组大小
在某些语言实现中创建的时候就固定了，所以经常由于数组太大导致效率低下或者数组太小导致空间溢出。

//节点类
function Node(element){
	this.element = element;
	this.next = null;
}

//链表类
function Llist(){
	this.head = new Node('head');
	this.find = find;
	this.insert = insert;
	this.remove = remove;
	this.display = display;
}

//插入或删除节点都要基于节点查找
function find(item){
	var currentNode = this.head;
	while(currentNode.element !== item){
		currentNode = currentNode.next;
	}
	return currentNode;
}

function insert(newElement,item){
	var newNode = new Node(newElement),
		targetNode = this.find(item);
	newNode.next = targetNode.next;
	targetNode.next = newNode;
}

function display(){
	var currentNode = this.head;
	while(currentNode.next !== null){
		print(currentNode.next.element);
		currentNode = currentNode.next;
	}
}

//删除节点要基于该方法
function findPrevious(item){
	var currentNode = this.head;
	while(currentNode.next !== null && currentNode.next.element !== item){
		currentNode = currentNode.next;
	}
	return currentNode;
}

function remove(item){
	var previousNode = this.findPrevious(item);
	if(previousNode.next !== null){
		previousNode.next = previousNode.next.next;
	}
}

双端链表：
双端链表与传统链表非常相似，但是它有一个新增的特性即对最后一个链节点的引用，就像对第一个链节点的
引用那样。对最后一个链节点的引用便于我们再链尾插入一个新节点。当然仍然可以在普通的链表中尾部插入
一个节点，但这样需要我们遍历整个链表。
function FirstLastList(){
	this.first = null;
	this.last = null;
	this.find = find;
	this.insertLast = insertLast;
	this.insertFirst = insertFirst;
}

FirstLastList.prototype.insertFirst = function(val){
	var newNode = new Node(val);
	if(isEmpty()){
		this.first = newNode;
	}
	else{
		newNode.next = this.first;
		this.first = newNode;
	}
};

FirstLastList.prototype.insertLast = function(val){
	var newNode = new Node(val);
	if(isEmpty()){
		this.first = newNode;
	}
	else{
		this.last.next = newNode;
		this.last = newNode;
	}
};


双向链表：
上述链表是单向的即从头元素直到尾元素，但反过来从后向前遍历则没那么简单。通过给node对象增加一个属性
该属性存储指向前驱的节点，这样就容易很多。但此时向链表中插入一个节点需要更多的工作，我们需要指出该
节点正确的前驱和后继。但是从链表中删除一个节点时效率高很多，不需要再专门查找前驱节点了。

function Node(element){
	this.element = element;
	this.next = null;
	this.previous = null;
}

function Llist(){
	this.head = new Node('head');
	this.find = find;
	this.insert = insert;
	this.remove = remove;
	this.findLast = findLast;
}

function find(item){
	var currentNode = this.head;
	while(currentNode.element !== item){
		currentNode = currentNode.next;
	}
	return currentNode;
}

function insert(newItem,item){
	var targetNode = this.find(item),
		newNode = new Node(newItem);
	newNode.next = targetNode.next
	newNode.previous = targetNode;
	targetNode.next.previous = newNode;
	targetNode.next = newNode;
}

//双向链表的删除节点操作要方便许多
function remove(item){
	var targetNode = this.find(item);
	if(targetNode.next !== null){
		targetNode.previous.next = targetNode.next;
		targetNode.next.previous = targetNode.previous;
	}
}

function findLast(){
	var currentNode = this.head;
	while(currentNode.next !== null){
		currentNode = currentNode.next;
	}
	return currentNode;
}

//反序遍历链表
function dispReverse(){
	var currentNode = this.findLast();
	while(currentNode.previous !== null){
		print(currentNode.element);
		currentNode = currentNode.previous;
	}
}