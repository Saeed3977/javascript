ps:这里只考虑最大二叉树
优先级队列可以用于计算机内部任务调度等其他很多场景，它是一个抽象数据类型，它提供了删除最大
关键字值的数据项的方法，插入数据项的方法，优先级队列可用不同的内部结构来实现。常用的是数组，
这种做法的具体实现可以用插入排序的方式，尽管删除的复杂度较低但插入数据还是需要较长的时间，因
为必须移动数组中平均一半的数据项以将数据插入到合适的位置，并在完成插入后，数组依然有序。
其实我们完全可以用另外一种数据结构来实现优先级队列：堆。堆是一种完全二叉树（即除了树的最后一层
节点的最后不需要是满的，其他的每一层从左到右都完全是满的，对应到数组中即不允许“漏洞”的出现我们
常用的查找二叉树通常是非完全二叉树），堆通常用数组来实现（堆在数组中对应索引是有规律可循的，即
父节点index其左子节点是2*index+1,右子节点是2*index+2，由此便可以推导出父子节点的关系从而便于遍
历，还有一个特点是子节点如果是左子节点则在数据中对应的索引是奇数，否则是偶数，由此只需要知道一个
节点在数组中的索引便可以推导出其父或者子节点的索引）,堆结构中每一个节点都必须满足其关键字值大于
它的子节点。
还有要特别注意的是我们用数组来实现的堆结构只能保证数组中被删除的元素是优先级最高的，数组其他位
置的元素优先级并不一定是完全有序的，但这已经满足了优先级队列的要求（即永远删除或者拿出优先级最高
的进行处理）

和查找二叉树对比：
堆和二叉搜索树相比是弱序的，在二叉搜索树中的所有节点的左子节点的关键字都小于右子节点的关键字，这
说明在一个二叉搜索树中通过一个简单的算法就可以按序遍历节点。在堆中，按序遍历节点是困难度的，因为
堆的组织规则比较弱，对于堆来讲，只要求沿着从根到叶子的每一条路径，节点都是按照降序排列的。指定节点
的左边子节点和右边子节点，以及上层节点或者下层节点由于不在同一条路径上，它们的关键字可能比指定节点
的关键字或大或小。除了共享节点的路径，路径之间都是相互独立的。由于堆是弱序的，所以一些操作时困难的
或者是不可能的，除了不支持遍历以外，也不能在堆上方便查找关键字，因为在查找的过程中每到一个节点都没
有足够的信息来决定到底走两个子节点的哪一个，也正因为此也没有办法删除指定关键字的节点。因此，堆结构
这种组织顺序接近无序，不过对于快速删除最大节点以及快速插入新节点的操作来讲，这种结构已经足够了。

堆的操作1：删除（向下筛选）
step1:移除根
step2:把最后一个节点移动到根的位置
step3:基于目前的根节点向下筛选（具体规则是沿着路径一步步和前面的节点进行比较并交换，向下筛选时要
检查哪一个子节点更大，然后目标节点和较大的子节点交换位置，如果和较小的子节点进行交换就违背了堆的
原则，直到找到合适的位置即在一个大于它的节点之下，小于它的节点之上）

堆的操作2：插入（向上筛选）
step1:插入节点时是插入到数组的最后一个单元（也就是堆二叉树结构中最后一级的最后，但新插入的节点的
		关键字值有可能大于它的父节点关键字值，所以需要向上遍历也就是第二个步骤）
step2:向上筛选比较简单，因为每一个节点只有一个父节点，目标节点只需要和它的父节点换位即直到目标
		节点在一个合适的位置
		
//For example		
function Heap(){
	this.dataStore = [];
	this.insert = insert;
	this.remove = remove;
	this.triggerUp = triggerUp;
	this.triggerDown = triggerDown;
}

function Node(key,data){
	//key指优先级值，data指节点其他数据
	this.key = key;
	this.data = data;
}

Node.prototype.getKey = function(){
	return this.key;
};

Heap.prototype.insert = function(key,data){
	var len = this.dataStore.length,
		newNode = new Node(key,data);
	this.dataStore[len] = newNode;
	this.triggerUp(newNode);
};

Heap.prototype.triggerUp = function(newNode){
	var dataStore = this.dataStore,
		bottomIndex = dataStore.length - 1,
		parentIndex = Math.floor((bottomIndex - 1)/2);
	while(bottomIndex > 0 && dataStore[parentIndex].getKey() < newNode.getKey()){
		dataStore[bottomIndex] = dataStore[parentIndex];
		bottomIndex = parentIndex;
		parentIndex = Math.floor((bottomIndex - 1)/2);
	}
	dataStore[parentIndex] = newNode;
};

Heap.prototype.remove = function(){
	var dataStore = this.dataStore,
		root = dataStore[0] = dataStore[dataStore.length - 1];
	dataStore.pop();
	this.triggerDown(root);
};

Heap.prototype.triggerDown = function(root){
	var dataStore = this.dataStore,
		currentIndex = 0,
		nextIndex = dataStore[2*currentIndex + 1].getKey() > dataStore[2*currentIndex + 2] ? 2*currentIndex + 1 : 2*currentIndex + 2;
	while(nextIndex < dataStore.length && dataStore[nextIndex] > root){
		data[Math.floor((nextIndex - 1)/2)] = dataStore[nextIndex];
		currentIndex = nextIndex;
		nextIndex = dataStore[2*currentIndex + 1].getKey() > dataStore[2*currentIndex + 2] ? 2*currentIndex + 1 : 2*currentIndex + 2;
	}
	dataStore[nextIndex] = root;
};

堆排序：
由上述方式我们可以生成一种全新的排序算法：堆排序
堆排序的基本思想很简单就是利用堆的insert方法不停插入新数据，然后重复利用堆的remove方法移除数据项从而生成一个有序的数据序列
