//冒泡排序法,最慢的排序算法之一
function bubbleSort(arr){
	var temp;
	for(var outer=arr.length; outer>=1; --outer){
		for(var inner=0; inner<outer; inner++){
			if(arr[inner] >= arr[inner+1]){
				temp = arr[inner];
				arr[inner] = arr[inner+1];
				arr[inner+1] = temp;
			}
		}
	}
	return arr;
}


//选择排序法
function SelectionSort(arr){
	var temp;
	for(var i=0,len=arr.length; i<len; i++){
		for(var j=i+1; j<len; j++){
			if(arr[i] >= arr[j]){
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
	return arr;
}


//插入排序法
/*
step1:

	4	4		3
	3		4	4	
	1	1	1	1
	2	2	2	2

step2:
	
	3	3		1
	4	4	3	3
	1		4	4
	2	2	2	2

step3:
	
	1	1	1	1
	3	3		2
	4	4	3	3
	2		4	4
*/
function insertSort(arr){
	var temp, inner, len = arr.length;
	for(var outer=1; outer<len; outer++){
		temp = arr[outer];
		inner = outer;
		while(inner > 0 && arr[inner-1] >= temp){
			arr[inner] = arr[inner-1];
			inner--;
		}
		arr[inner] = temp;
	}
	return arr;
}


//快速排序法，其实是一种“分而排之”的理念
function quickSort(arr){
	var base = arr[0],
		len = arr.length,
		item,
		larger = [],
		smaller = [],
		self = arguments.callee;
	if(!base){
		return [];
	}
	if(len == 1){
		return [base];
	}
	for(var i=1; i<len; i++){
		item = arr[i];
		if(item >= base){
			larger.push(item);
		}
		else{
			smaller.push(item);
		}
	}
	return self(smaller).concat(base,self(larger));
}

//二分法插入排序
function binaryInsertSort(arr){
	for(var i=0; i<arr.length; i++){
		var start,end,mid,temp;
		start = 0;
		end = i-1;
		temp = arr[i];
		while(start <= end){
			mid = Math.floor((start + end) / 2);
			if(arr[mid] > temp){
				end = mid - 1;
			}
			else{
				start = mid + 1;
			}
		}
		for(var j=i-1; j>end; j--){
			arr[j + 1] = arr[j];
		}
		arr[end + 1] = temp;
	}
}





