//冒泡排序法,最慢的排序算法之一
function bubbleSort(arr){
	var len = arr.length;
	for(var outer=len; outer>1; --outer){
		for(var inner=0; inner<outer; inner++){
			if(arr[inner] > arr[inner+1]){
				temp = arr[inner+1];
				arr[inner+1] = arr[inner];
				arr[inner] = temp;
			}
		}
	}
	return arr;
}

//选择排序法
function selectionSort(arr){
	var temp, len = arr.length;
	for(var i=0; i<len; i++){
		for(var j=i+1; j<len; j++){
			if(arr[i] > arr[j]){
				temp = arr[j];
				arr[j] = arr[i];
				arr[i] = temp;
			}
		}
	}
	return arr;
}

//插入排序法
/*
step1:

	4	4		3
	3		4	4	
	1	1	1	1
	2	2	2	2

step2:
	
	3	3		1
	4	4	3	3
	1		4	4
	2	2	2	2

step3:
	
	1	1	1	1
	3	3		2
	4	4	3	3
	2		4	4
*/

function insertSort(arr){
	var temp,inner,len=arr.length;
	for(var outer=1; outer<len; outer++){
		temp = arr[outer];
		inner = outer;
		while(inner > 0 && arr[inner-1] >= temp){
			arr[inner] = arr[inner-1];
			--inner;
		}
		arr[inner] = temp;
	}
}

//快速排序法，其实是一种“分而排之”的理念
function quickSort(arr){
	var smallArr = [], largeArr = [], 
		item, baseItem,
		len = arr.length,
		self = arguments.callee;
	if(len == 0){
		return [];
	}
	baseItem = arr[0];
	for(var i=1; i<len; i++){
		item = arr[i];
		if(item > baseItem){
			largeArr.push(item);
		}
		else{
			smallArr.push(item);
		}
	}
	return self(smallArr).concat(baseItem,self(largeArr));
}

//归并排序法，一种“分而合之”的排序算法

mergeSort([6, 2, 4, 1, 5, 9],0,6,new Array(6));

function mergeSort(unsortArr,first,last,sortArr){
	if(first + 1 < last){
		var mid = (first + last)/2;
	}
}

function merge(){
	
}





