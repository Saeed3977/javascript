定义：
栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称之为栈。咖啡厅内的
一摞盘子是现实世界中常见的栈的例子。只能从最上面取盘子，盘子洗干净后也只能摞在这
一摞盘子的最上面。栈被称为一种后入先出的数据结构。
由于栈具有后入先出的特点，所以任何不在栈顶的元素都无法访问(受限访问也是栈数据结构
的一大特点)。为了得到栈底的元素，必须先拿掉上面的元素。对栈的两种主要操作时将一个
元素压入栈和将一个元素弹出栈。
入栈使用push()方法，出栈使用pop()方法。另一个常用的操作是预览栈顶的元素。pop()
方法虽然可以访问栈顶的元素，但是调用该方法后栈顶元素也就永久被删除了。peek()方法
则只返回栈顶的元素，而不删除。为了记录栈顶元素的位置，同时也为了标记哪里可以加入
新元素，我们使用变量top，当向栈内压入元素时，该变量增大，从栈内弹出元素时，该变量
减小。
栈的概念和实现它的内部数据结构是完全分开的，我们可以通过数组或者链表来实现栈结构

//通过数组实现栈结构（通过游标的移动来控制进出栈，数组中的元素在出栈时并没有被删除
要特别注意进栈时游标先上移一位然后插入元素，而出栈是先返回栈顶元素然后游标下移一位）
function Stack(){
	this.dataStore = [];
	this.top = -1;
	this.push = push;
	this.pop = pop;
	this.peek = peek;
}

function push(element){
	this.dataStore[++this.top] = element;
}

function pop(){
	//最顶层元素其实没有删除，但在概念上已经不存在因为top已变
	return this.dataStore[this.top--];
}

function peek(){
	return this.dataStore[this.top];
}

function length(){
	return this.top + 1;
}

function clear(){
	this.top = -1;
}

function isEmpty(){
	return this.top == -1;
}

//通过链表来实现栈结构（此时要抛弃在脑海中的固有“叠盘子”的对栈结构的“竖”印象，我们只
需要控制好链表node的top属性即可）
function Stack(){
	this.dataStore = linkedList;
	this.top = this.dataStore.first;
	this.push = push;
	this.pop = pop;
}

function push(element){
	var temp = this.top;
	this.top = element;
	this.top.next = temp;
}

function pop(){
	this.top = this.top.next;
}






/*
	//回文或者倒序
	function isPalindrome(word){
		var s = new Stack(), rword = '';
		for(var i=0; i<word.length; i++){
			s.push(word[i]);
		}
		while(s.length() > 0){
			rword += s.pop();
		}
		word == rword ? return true : return false;
	}
	
	//使用栈模拟递归
	function fact(n){
		var s = new Stack(), product = 1;
		while(n > 1){
			s.push(n--);
		}
		while(s.length() > 0){
			product *= s.pop();
		}
		return product;
	}
	
	//分隔符匹配
	var checkStack = new Stack();
	for(var i=0; i<strArr.length; i++){
		var item = strArr[i];
		if(/[\{\}\[\]\(\)]/g.test(item)){
			switch(item){
				case '{': 
				case '[':
				case '(':
					checkStack.push(item); break;
				case '}':
				case ']':
				case ')':
					if(!checkStack.isEmpty()){
						var checkItem = checkStack.pop();
						if((item == '}' && checkItem !== '{') || (item == ']' && checkItem !== '[') || (item == ')' && checkItem !== '(')){
							console.log('error at match ' + item);
						}
					}
					break;
			}
		}
	}
	
*/

最新ECMASCRIPT所提供数组操作API:
1.forEach()方法让数组的每一项都执行一次给定的函数
	/*
		Array.prototype.forEach = function(callback){
			callback.apply(this,[item,index,arr]);
		};
		
		var arr = [2,5,9];
		function logArrayElements(item,index,array){
			console.log('a['+ index +'] = ' + item);
		}
		arr.forEach(logArrayElements);
	*/

2.every()方法接受一个返回值为布尔值的函数，对数组中的每个元素都使用该函数，
如果对于所有元素该函数均返回true,则该方法返回true
	/*
		function isEven(num){
			return num%2 == 0;
		}
		var arr = [2,4,6,8,10],
			isEvent = arr.every(isEvent);
		if(isEvent){
			console.log('all number are event');
		}
	*/
	
3.some()方法接受一个返回值为布尔值的函数，只要数组中有一个元素使得该函数返回true,
该方法就返回true
	/*
		function isOdd(num){
			return num%2 !== 0;
		}
		var arr = [1,2,4,6,8],
			isOdd = arr.some(isOdd);
		if(isOdd){
			console.log('some are odd');
		}
		else{
			console.log('all are even');
		}
	*/
	
4.reduce()方法接受一个函数返回一个值，该方法会从一个累加值开始，不断对累加值和数组
中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值
	/*
		function add(runningTotal,item){
			return runningTotal + item;
		}
		var arr = [1,2,3,4,5,6,7,8,9,10];
		console.log(arr.reduce(add));	//55
	*/
	
5.生成新数组的迭代器方法map()和filter(),map和forEach非常相似都是对数组的每一个元素
执行一个函数，但两者的区别在于map方法会返回一个新的数组，该数组的元素是对原有元素执行
函数后的得到的：
	/*
		function curve(grade){
			return grade += 5;
		}
		var grades = [67,81,77,65];
		console.log(grades.map(curve)); //[72,86,82,70]
	*/
	
6.filter()方法和every()方法类似传入一个返回布尔值的函数，该方法也返回一个新数组,该数组
的元素为应用函数后结果为true的元素.所以该方法常被用来过滤出符合特定条件的元素
	/*
		function isEven(number){
			return number%2 == 0;
		}
		var arr = [2,4,6,8,9,10];
		console.log(arr.filter(isEven)); //[2,4,6,8,10]
	*/